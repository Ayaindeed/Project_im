const db = require('./backend/src/models');
const { QueryTypes } = require('sequelize');

async function checkDatabaseConstraints() {
    try {
        console.log('üîç V√âRIFICATION DES CONTRAINTES DE LA BASE DE DONN√âES MySQL');
        console.log('=' .repeat(70));
        
        // 1. Test de connexion √† la base de donn√©es
        await db.sequelize.authenticate();
        console.log('‚úÖ Connexion √† la base de donn√©es √©tablie\n');
        
        // 2. Obtenir le nom de la base de donn√©es
        const dbName = db.sequelize.config.database;
        console.log(`üìã Base de donn√©es: ${dbName}\n`);
        
        // 3. Lister toutes les tables
        console.log('üìä TABLES EXISTANTES:');
        console.log('-'.repeat(50));
        const tables = await db.sequelize.query(
            "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = ? ORDER BY TABLE_NAME",
            {
                replacements: [dbName],
                type: QueryTypes.SELECT
            }
        );
        
        tables.forEach((table, index) => {
            console.log(`${index + 1}. ${table.TABLE_NAME}`);
        });
        console.log();
        
        // 4. V√©rifier les contraintes de cl√©s √©trang√®res
        console.log('üîó CONTRAINTES DE CL√âS √âTRANG√àRES:');
        console.log('-'.repeat(50));
        const foreignKeys = await db.sequelize.query(`
            SELECT 
                kcu.TABLE_NAME,
                kcu.COLUMN_NAME,
                kcu.CONSTRAINT_NAME,
                kcu.REFERENCED_TABLE_NAME,
                kcu.REFERENCED_COLUMN_NAME,
                rc.UPDATE_RULE,
                rc.DELETE_RULE
            FROM 
                INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu
            JOIN 
                INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS rc 
                ON kcu.CONSTRAINT_NAME = rc.CONSTRAINT_NAME
            WHERE 
                kcu.TABLE_SCHEMA = ? 
                AND kcu.REFERENCED_TABLE_NAME IS NOT NULL
            ORDER BY 
                kcu.TABLE_NAME, kcu.COLUMN_NAME
        `, {
            replacements: [dbName],
            type: QueryTypes.SELECT
        });
        
        if (foreignKeys.length === 0) {
            console.log('‚ö†Ô∏è  Aucune contrainte de cl√© √©trang√®re trouv√©e!');
        } else {
            console.log(`‚úÖ ${foreignKeys.length} contrainte(s) de cl√© √©trang√®re trouv√©e(s):\n`);
            
            foreignKeys.forEach((fk, index) => {
                console.log(`${index + 1}. Table: ${fk.TABLE_NAME}`);
                console.log(`   Colonne: ${fk.COLUMN_NAME}`);
                console.log(`   R√©f√©rence: ${fk.REFERENCED_TABLE_NAME}.${fk.REFERENCED_COLUMN_NAME}`);
                console.log(`   Contrainte: ${fk.CONSTRAINT_NAME}`);
                console.log(`   R√®gles: UPDATE=${fk.UPDATE_RULE}, DELETE=${fk.DELETE_RULE}`);
                console.log();
            });
        }
        
        // 5. V√©rifier les contraintes UNIQUE
        console.log('üîë CONTRAINTES UNIQUE:');
        console.log('-'.repeat(50));
        const uniqueConstraints = await db.sequelize.query(`
            SELECT 
                tc.TABLE_NAME,
                tc.CONSTRAINT_NAME,
                kcu.COLUMN_NAME
            FROM 
                INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc
            JOIN 
                INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu 
                ON tc.CONSTRAINT_NAME = kcu.CONSTRAINT_NAME
            WHERE 
                tc.TABLE_SCHEMA = ? 
                AND tc.CONSTRAINT_TYPE = 'UNIQUE'
            ORDER BY 
                tc.TABLE_NAME, kcu.COLUMN_NAME
        `, {
            replacements: [dbName],
            type: QueryTypes.SELECT
        });
        
        if (uniqueConstraints.length === 0) {
            console.log('‚ö†Ô∏è  Aucune contrainte UNIQUE trouv√©e!');
        } else {
            console.log(`‚úÖ ${uniqueConstraints.length} contrainte(s) UNIQUE trouv√©e(s):\n`);
            
            uniqueConstraints.forEach((uc, index) => {
                console.log(`${index + 1}. Table: ${uc.TABLE_NAME}`);
                console.log(`   Colonne: ${uc.COLUMN_NAME}`);
                console.log(`   Contrainte: ${uc.CONSTRAINT_NAME}`);
                console.log();
            });
        }
        
        // 6. V√©rifier les contraintes CHECK (MySQL 8.0+)
        console.log('‚úÖ CONTRAINTES CHECK:');
        console.log('-'.repeat(50));
        try {
            const checkConstraints = await db.sequelize.query(`
                SELECT 
                    cc.TABLE_NAME,
                    cc.CONSTRAINT_NAME,
                    cc.CHECK_CLAUSE
                FROM 
                    INFORMATION_SCHEMA.CHECK_CONSTRAINTS cc
                JOIN 
                    INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc 
                    ON cc.CONSTRAINT_NAME = tc.CONSTRAINT_NAME
                WHERE 
                    tc.TABLE_SCHEMA = ?
                ORDER BY 
                    cc.TABLE_NAME
            `, {
                replacements: [dbName],
                type: QueryTypes.SELECT
            });
            
            if (checkConstraints.length === 0) {
                console.log('‚ÑπÔ∏è  Aucune contrainte CHECK trouv√©e (normal si MySQL < 8.0)');
            } else {
                console.log(`‚úÖ ${checkConstraints.length} contrainte(s) CHECK trouv√©e(s):\n`);
                
                checkConstraints.forEach((cc, index) => {
                    console.log(`${index + 1}. Table: ${cc.TABLE_NAME}`);
                    console.log(`   Contrainte: ${cc.CONSTRAINT_NAME}`);
                    console.log(`   Condition: ${cc.CHECK_CLAUSE}`);
                    console.log();
                });
            }
        } catch (error) {
            console.log('‚ÑπÔ∏è  Contraintes CHECK non support√©es (MySQL < 8.0)');
        }
        
        // 7. V√©rifier les INDEX
        console.log('üìá INDEX:');
        console.log('-'.repeat(50));
        const indexes = await db.sequelize.query(`
            SELECT 
                TABLE_NAME,
                INDEX_NAME,
                COLUMN_NAME,
                NON_UNIQUE,
                INDEX_TYPE
            FROM 
                INFORMATION_SCHEMA.STATISTICS 
            WHERE 
                TABLE_SCHEMA = ? 
                AND INDEX_NAME != 'PRIMARY'
            ORDER BY 
                TABLE_NAME, INDEX_NAME, SEQ_IN_INDEX
        `, {
            replacements: [dbName],
            type: QueryTypes.SELECT
        });
        
        if (indexes.length === 0) {
            console.log('‚ö†Ô∏è  Aucun index trouv√©!');
        } else {
            console.log(`‚úÖ ${indexes.length} index trouv√©(s):\n`);
            
            const groupedIndexes = {};
            indexes.forEach(idx => {
                const key = `${idx.TABLE_NAME}.${idx.INDEX_NAME}`;
                if (!groupedIndexes[key]) {
                    groupedIndexes[key] = {
                        table: idx.TABLE_NAME,
                        name: idx.INDEX_NAME,
                        unique: idx.NON_UNIQUE === 0,
                        type: idx.INDEX_TYPE,
                        columns: []
                    };
                }
                groupedIndexes[key].columns.push(idx.COLUMN_NAME);
            });
            
            Object.values(groupedIndexes).forEach((idx, index) => {
                console.log(`${index + 1}. Table: ${idx.table}`);
                console.log(`   Index: ${idx.name}`);
                console.log(`   Colonnes: ${idx.columns.join(', ')}`);
                console.log(`   Type: ${idx.type} ${idx.unique ? '(UNIQUE)' : ''}`);
                console.log();
            });
        }
        
        // 8. Analyser les relations Sequelize vs contraintes DB
        console.log('üîÑ ANALYSE DES RELATIONS SEQUELIZE:');
        console.log('-'.repeat(50));
        
        const expectedRelations = [
            { table: 'etudiants', column: 'userId', references: 'users.id' },
            { table: 'entreprises', column: 'userId', references: 'users.id' },
            { table: 'tuteurs', column: 'userId', references: 'users.id' },
            { table: 'tuteurs', column: 'entrepriseId', references: 'entreprises.id' },
            { table: 'stages', column: 'entrepriseId', references: 'entreprises.id' },
            { table: 'candidatures', column: 'etudiantId', references: 'etudiants.id' },
            { table: 'candidatures', column: 'stageId', references: 'stages.id' },
            { table: 'candidatures', column: 'entrepriseId', references: 'entreprises.id' }
        ];
        
        console.log('Relations attendues selon les mod√®les Sequelize:');
        expectedRelations.forEach((rel, index) => {
            const found = foreignKeys.find(fk => 
                fk.TABLE_NAME === rel.table && 
                fk.COLUMN_NAME === rel.column &&
                `${fk.REFERENCED_TABLE_NAME}.${fk.REFERENCED_COLUMN_NAME}` === rel.references
            );
            
            console.log(`${index + 1}. ${rel.table}.${rel.column} ‚Üí ${rel.references} ${found ? '‚úÖ' : '‚ùå'}`);
        });
        
        // 9. R√©sum√© et recommandations
        console.log('\n' + '='.repeat(70));
        console.log('üìä R√âSUM√â:');
        console.log(`‚Ä¢ Tables: ${tables.length}`);
        console.log(`‚Ä¢ Cl√©s √©trang√®res: ${foreignKeys.length}`);
        console.log(`‚Ä¢ Contraintes UNIQUE: ${uniqueConstraints.length}`);
        console.log(`‚Ä¢ Index: ${Object.keys(indexes.reduce((acc, idx) => {
            acc[`${idx.TABLE_NAME}.${idx.INDEX_NAME}`] = true;
            return acc;
        }, {})).length}`);
        
        // 10. Recommandations
        console.log('\nüí° RECOMMANDATIONS:');
        if (foreignKeys.length < expectedRelations.length) {
            console.log('‚ö†Ô∏è  Certaines contraintes de cl√©s √©trang√®res semblent manquer.');
            console.log('   ‚Üí V√©rifiez que les relations Sequelize sont bien d√©finies');
            console.log('   ‚Üí Utilisez { force: true } lors du sync pour recr√©er les contraintes');
        }
        
        if (uniqueConstraints.length === 0) {
            console.log('‚ö†Ô∏è  Aucune contrainte UNIQUE d√©tect√©e.');
            console.log('   ‚Üí V√©rifiez les champs email, googleId qui devraient √™tre uniques');
        }
        
        console.log('\nüöÄ COMMANDES UTILES:');
        console.log('‚Ä¢ Pour recr√©er les contraintes: node backend/sync-database.js');
        console.log('‚Ä¢ Pour nettoyer la DB: node backend/clean-database.js');
        console.log('‚Ä¢ Pour r√©initialiser: node backend/seed-database.js');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification des contraintes:', error);
        
        if (error.name === 'SequelizeConnectionError') {
            console.log('\nüí° Suggestions:');
            console.log('‚Ä¢ V√©rifiez que MySQL est d√©marr√©');
            console.log('‚Ä¢ V√©rifiez les param√®tres de connexion dans .env');
            console.log('‚Ä¢ V√©rifiez que la base de donn√©es existe');
        }
    } finally {
        await db.sequelize.close();
        console.log('\nüîí Connexion ferm√©e.');
    }
}

// Ex√©cution du script
checkDatabaseConstraints()
    .then(() => process.exit(0))
    .catch(err => {
        console.error('‚ùå Erreur fatale:', err);
        process.exit(1);
    });
