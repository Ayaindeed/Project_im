{"ast":null,"code":"import api from './api';\n\n// Service pour récupérer tous les stages pour l'admin\nexport const getAllStagesForAdmin = async () => {\n  try {\n    const response = await api.get('/admin/stages');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching all stages for admin:', error);\n    throw error;\n  }\n};\n\n// Service pour récupérer toutes les candidatures pour l'admin\nexport const getAllCandidaturesForAdmin = async () => {\n  try {\n    const response = await api.get('/admin/candidatures');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching all candidatures for admin:', error);\n    throw error;\n  }\n};\n\n// Service pour mettre à jour le statut d'un stage (admin)\nexport const updateStageStatusAdmin = async (stageId, status) => {\n  try {\n    const response = await api.put(`/admin/stages/${stageId}/status`, {\n      status\n    });\n\n    // Déclencher l'événement de mise à jour des stats\n    window.dispatchEvent(new CustomEvent('statsUpdated', {\n      detail: {\n        type: 'stage_status_updated',\n        stageId,\n        status\n      }\n    }));\n    return response.data;\n  } catch (error) {\n    console.error('Error updating stage status:', error);\n    throw error;\n  }\n};\n\n// Service pour récupérer les statistiques détaillées\nexport const getDetailedStats = async () => {\n  try {\n    const response = await api.get('/admin/stages/stats');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching detailed stats:', error);\n    throw error;\n  }\n};\n\n// Service pour les notifications admin\nexport const dispatchAdminNotification = (type, data) => {\n  const notificationEvent = new CustomEvent('adminNotification', {\n    detail: {\n      type,\n      data,\n      timestamp: new Date().toISOString()\n    }\n  });\n  window.dispatchEvent(notificationEvent);\n};\n\n// Service pour synchroniser les données entre les pages admin\nexport const syncAdminData = () => {\n  const syncEvent = new CustomEvent('adminDataSync', {\n    detail: {\n      timestamp: new Date().toISOString()\n    }\n  });\n  window.dispatchEvent(syncEvent);\n};\nexport default {\n  getAllStagesForAdmin,\n  getAllCandidaturesForAdmin,\n  updateStageStatusAdmin,\n  getDetailedStats,\n  dispatchAdminNotification,\n  syncAdminData\n};","map":{"version":3,"names":["api","getAllStagesForAdmin","response","get","data","error","console","getAllCandidaturesForAdmin","updateStageStatusAdmin","stageId","status","put","window","dispatchEvent","CustomEvent","detail","type","getDetailedStats","dispatchAdminNotification","notificationEvent","timestamp","Date","toISOString","syncAdminData","syncEvent"],"sources":["C:/Users/hp/Downloads/Project_/internMatch/frontend/src/services/adminService.js"],"sourcesContent":["import api from './api';\r\n\r\n// Service pour récupérer tous les stages pour l'admin\r\nexport const getAllStagesForAdmin = async () => {\r\n    try {\r\n        const response = await api.get('/admin/stages');\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error fetching all stages for admin:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Service pour récupérer toutes les candidatures pour l'admin\r\nexport const getAllCandidaturesForAdmin = async () => {\r\n    try {\r\n        const response = await api.get('/admin/candidatures');\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error fetching all candidatures for admin:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Service pour mettre à jour le statut d'un stage (admin)\r\nexport const updateStageStatusAdmin = async (stageId, status) => {\r\n    try {\r\n        const response = await api.put(`/admin/stages/${stageId}/status`, { status });\r\n        \r\n        // Déclencher l'événement de mise à jour des stats\r\n        window.dispatchEvent(new CustomEvent('statsUpdated', {\r\n            detail: { type: 'stage_status_updated', stageId, status }\r\n        }));\r\n        \r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error updating stage status:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Service pour récupérer les statistiques détaillées\r\nexport const getDetailedStats = async () => {\r\n    try {\r\n        const response = await api.get('/admin/stages/stats');\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error fetching detailed stats:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Service pour les notifications admin\r\nexport const dispatchAdminNotification = (type, data) => {\r\n    const notificationEvent = new CustomEvent('adminNotification', {\r\n        detail: { type, data, timestamp: new Date().toISOString() }\r\n    });\r\n    window.dispatchEvent(notificationEvent);\r\n};\r\n\r\n// Service pour synchroniser les données entre les pages admin\r\nexport const syncAdminData = () => {\r\n    const syncEvent = new CustomEvent('adminDataSync', {\r\n        detail: { timestamp: new Date().toISOString() }\r\n    });\r\n    window.dispatchEvent(syncEvent);\r\n};\r\n\r\nexport default {\r\n    getAllStagesForAdmin,\r\n    getAllCandidaturesForAdmin,\r\n    updateStageStatusAdmin,\r\n    getDetailedStats,\r\n    dispatchAdminNotification,\r\n    syncAdminData\r\n};\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;;AAEvB;AACA,OAAO,MAAMC,oBAAoB,GAAG,MAAAA,CAAA,KAAY;EAC5C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,eAAe,CAAC;IAC/C,OAAOD,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,0BAA0B,GAAG,MAAAA,CAAA,KAAY;EAClD,IAAI;IACA,MAAML,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,qBAAqB,CAAC;IACrD,OAAOD,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;IAClE,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,sBAAsB,GAAG,MAAAA,CAAOC,OAAO,EAAEC,MAAM,KAAK;EAC7D,IAAI;IACA,MAAMR,QAAQ,GAAG,MAAMF,GAAG,CAACW,GAAG,CAAC,iBAAiBF,OAAO,SAAS,EAAE;MAAEC;IAAO,CAAC,CAAC;;IAE7E;IACAE,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAAC,cAAc,EAAE;MACjDC,MAAM,EAAE;QAAEC,IAAI,EAAE,sBAAsB;QAAEP,OAAO;QAAEC;MAAO;IAC5D,CAAC,CAAC,CAAC;IAEH,OAAOR,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMY,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACA,MAAMf,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,qBAAqB,CAAC;IACrD,OAAOD,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMa,yBAAyB,GAAGA,CAACF,IAAI,EAAEZ,IAAI,KAAK;EACrD,MAAMe,iBAAiB,GAAG,IAAIL,WAAW,CAAC,mBAAmB,EAAE;IAC3DC,MAAM,EAAE;MAAEC,IAAI;MAAEZ,IAAI;MAAEgB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IAAE;EAC9D,CAAC,CAAC;EACFV,MAAM,CAACC,aAAa,CAACM,iBAAiB,CAAC;AAC3C,CAAC;;AAED;AACA,OAAO,MAAMI,aAAa,GAAGA,CAAA,KAAM;EAC/B,MAAMC,SAAS,GAAG,IAAIV,WAAW,CAAC,eAAe,EAAE;IAC/CC,MAAM,EAAE;MAAEK,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IAAE;EAClD,CAAC,CAAC;EACFV,MAAM,CAACC,aAAa,CAACW,SAAS,CAAC;AACnC,CAAC;AAED,eAAe;EACXvB,oBAAoB;EACpBM,0BAA0B;EAC1BC,sBAAsB;EACtBS,gBAAgB;EAChBC,yBAAyB;EACzBK;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}