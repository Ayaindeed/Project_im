{"ast":null,"code":"import api from './api';\nexport const getAllStages = async () => {\n  const response = await api.get('/stage');\n  return response.data;\n};\nexport const getEntrepriseStages = async () => {\n  try {\n    var _response$data;\n    console.log('Calling API: /entreprise/stages');\n    const response = await api.get('/entreprise/stages');\n    console.log('Enterprise stages API response:', response);\n    console.log('Response data:', response.data);\n    console.log('Data length:', (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.length);\n    if (response.data && response.data.length > 0) {\n      console.log('First stage:', response.data[0]);\n      console.log('First stage candidatures:', response.data[0].candidatures);\n    }\n\n    // Return the data directly without nesting it further\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error('Error fetching enterprise stages:', error);\n    console.error('Error details:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n    throw error;\n  }\n};\nexport const createStage = async stageData => {\n  try {\n    console.log('Creating stage with data:', stageData);\n    const response = await api.post('/entreprise/stages', stageData);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating stage:', error);\n    throw error;\n  }\n};\nexport const postulerStage = async formData => {\n  // Configure axios to handle FormData\n  const config = {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  };\n  const response = await api.post(`/stage/${formData.get('stageId')}/postuler`, formData, config);\n  return response.data;\n};\nexport const getStageStats = async () => {\n  const response = await api.get('/admin/stages/stats');\n  return response.data;\n};\nexport const getCandidatures = async () => {\n  try {\n    const response = await api.get('/entreprise/candidatures');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching candidatures:', error);\n    throw error;\n  }\n};\nexport const traiterCandidature = async (candidatureId, data) => {\n  try {\n    const response = await api.put(`/entreprise/candidatures/${candidatureId}/traiter`, data);\n    return response.data;\n  } catch (error) {\n    console.error('Error processing candidature:', error);\n    throw error;\n  }\n};\nexport const updateStage = async (stageId, stageData) => {\n  try {\n    console.log('Updating stage with ID:', stageId, 'and data:', stageData);\n    const response = await api.put(`/entreprise/stages/${stageId}`, stageData);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating stage:', error);\n    throw error;\n  }\n};\nexport const deleteStage = async stageId => {\n  try {\n    console.log('Deleting stage with ID:', stageId);\n    const response = await api.delete(`/entreprise/stages/${stageId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error deleting stage:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["api","getAllStages","response","get","data","getEntrepriseStages","_response$data","console","log","length","candidatures","error","_error$response","createStage","stageData","post","postulerStage","formData","config","headers","getStageStats","getCandidatures","traiterCandidature","candidatureId","put","updateStage","stageId","deleteStage","delete"],"sources":["C:/Users/hp/Downloads/Project_/internship-management-app/frontend/src/services/stageService.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const getAllStages = async () => {\r\n    const response = await api.get('/stage');\r\n    return response.data;\r\n};\r\n\r\nexport const getEntrepriseStages = async () => {\r\n    try {\r\n        console.log('Calling API: /entreprise/stages');\r\n        const response = await api.get('/entreprise/stages');\r\n        console.log('Enterprise stages API response:', response);\r\n        console.log('Response data:', response.data);\r\n        console.log('Data length:', response.data?.length);\r\n        \r\n        if (response.data && response.data.length > 0) {\r\n            console.log('First stage:', response.data[0]);\r\n            console.log('First stage candidatures:', response.data[0].candidatures);\r\n        }\r\n        \r\n        // Return the data directly without nesting it further\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error fetching enterprise stages:', error);\r\n        console.error('Error details:', error.response?.data);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const createStage = async (stageData) => {\r\n    try {\r\n        console.log('Creating stage with data:', stageData);\r\n        const response = await api.post('/entreprise/stages', stageData);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error creating stage:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const postulerStage = async (formData) => {\r\n    // Configure axios to handle FormData\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }\r\n    };\r\n    const response = await api.post(`/stage/${formData.get('stageId')}/postuler`, formData, config);\r\n    return response.data;\r\n};\r\n\r\nexport const getStageStats = async () => {\r\n    const response = await api.get('/admin/stages/stats');\r\n    return response.data;\r\n};\r\n\r\nexport const getCandidatures = async () => {\r\n    try {\r\n        const response = await api.get('/entreprise/candidatures');\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error fetching candidatures:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const traiterCandidature = async (candidatureId, data) => {\r\n    try {\r\n        const response = await api.put(`/entreprise/candidatures/${candidatureId}/traiter`, data);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error processing candidature:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const updateStage = async (stageId, stageData) => {\r\n    try {\r\n        console.log('Updating stage with ID:', stageId, 'and data:', stageData);\r\n        const response = await api.put(`/entreprise/stages/${stageId}`, stageData);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error updating stage:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const deleteStage = async (stageId) => {\r\n    try {\r\n        console.log('Deleting stage with ID:', stageId);\r\n        const response = await api.delete(`/entreprise/stages/${stageId}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error deleting stage:', error);\r\n        throw error;\r\n    }\r\n};"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACpC,MAAMC,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,QAAQ,CAAC;EACxC,OAAOD,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC3C,IAAI;IAAA,IAAAC,cAAA;IACAC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAC9C,MAAMN,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,oBAAoB,CAAC;IACpDI,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEN,QAAQ,CAAC;IACxDK,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEN,QAAQ,CAACE,IAAI,CAAC;IAC5CG,OAAO,CAACC,GAAG,CAAC,cAAc,GAAAF,cAAA,GAAEJ,QAAQ,CAACE,IAAI,cAAAE,cAAA,uBAAbA,cAAA,CAAeG,MAAM,CAAC;IAElD,IAAIP,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACK,MAAM,GAAG,CAAC,EAAE;MAC3CF,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEN,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;MAC7CG,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEN,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC,CAACM,YAAY,CAAC;IAC3E;;IAEA;IACA,OAAOR,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOO,KAAK,EAAE;IAAA,IAAAC,eAAA;IACZL,OAAO,CAACI,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzDJ,OAAO,CAACI,KAAK,CAAC,gBAAgB,GAAAC,eAAA,GAAED,KAAK,CAACT,QAAQ,cAAAU,eAAA,uBAAdA,eAAA,CAAgBR,IAAI,CAAC;IACrD,MAAMO,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAME,WAAW,GAAG,MAAOC,SAAS,IAAK;EAC5C,IAAI;IACAP,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEM,SAAS,CAAC;IACnD,MAAMZ,QAAQ,GAAG,MAAMF,GAAG,CAACe,IAAI,CAAC,oBAAoB,EAAED,SAAS,CAAC;IAChE,OAAOZ,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOO,KAAK,EAAE;IACZJ,OAAO,CAACI,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMK,aAAa,GAAG,MAAOC,QAAQ,IAAK;EAC7C;EACA,MAAMC,MAAM,GAAG;IACXC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB;EACJ,CAAC;EACD,MAAMjB,QAAQ,GAAG,MAAMF,GAAG,CAACe,IAAI,CAAC,UAAUE,QAAQ,CAACd,GAAG,CAAC,SAAS,CAAC,WAAW,EAAEc,QAAQ,EAAEC,MAAM,CAAC;EAC/F,OAAOhB,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,OAAO,MAAMgB,aAAa,GAAG,MAAAA,CAAA,KAAY;EACrC,MAAMlB,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,qBAAqB,CAAC;EACrD,OAAOD,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,OAAO,MAAMiB,eAAe,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACA,MAAMnB,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,0BAA0B,CAAC;IAC1D,OAAOD,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOO,KAAK,EAAE;IACZJ,OAAO,CAACI,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMW,kBAAkB,GAAG,MAAAA,CAAOC,aAAa,EAAEnB,IAAI,KAAK;EAC7D,IAAI;IACA,MAAMF,QAAQ,GAAG,MAAMF,GAAG,CAACwB,GAAG,CAAC,4BAA4BD,aAAa,UAAU,EAAEnB,IAAI,CAAC;IACzF,OAAOF,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOO,KAAK,EAAE;IACZJ,OAAO,CAACI,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMc,WAAW,GAAG,MAAAA,CAAOC,OAAO,EAAEZ,SAAS,KAAK;EACrD,IAAI;IACAP,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEkB,OAAO,EAAE,WAAW,EAAEZ,SAAS,CAAC;IACvE,MAAMZ,QAAQ,GAAG,MAAMF,GAAG,CAACwB,GAAG,CAAC,sBAAsBE,OAAO,EAAE,EAAEZ,SAAS,CAAC;IAC1E,OAAOZ,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOO,KAAK,EAAE;IACZJ,OAAO,CAACI,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMgB,WAAW,GAAG,MAAOD,OAAO,IAAK;EAC1C,IAAI;IACAnB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEkB,OAAO,CAAC;IAC/C,MAAMxB,QAAQ,GAAG,MAAMF,GAAG,CAAC4B,MAAM,CAAC,sBAAsBF,OAAO,EAAE,CAAC;IAClE,OAAOxB,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOO,KAAK,EAAE;IACZJ,OAAO,CAACI,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}