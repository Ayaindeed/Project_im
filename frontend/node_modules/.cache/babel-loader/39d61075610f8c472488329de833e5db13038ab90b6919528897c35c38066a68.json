{"ast":null,"code":"import api from './api';\nexport const getEntrepriseStages = async () => {\n  try {\n    const response = await api.get('/entreprise/stages');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching enterprise stages:', error);\n    throw error;\n  }\n};\nexport const getEntrepriseCandidatures = async () => {\n  try {\n    const response = await api.get('/entreprise/candidatures');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching candidatures:', error);\n    throw error;\n  }\n};\nexport const getEntrepriseProfile = async () => {\n  const response = await api.get('/entreprise/profile');\n  return response.data;\n};\nexport const updateEntrepriseProfile = async profileData => {\n  const response = await api.put('/entreprise/profile', profileData);\n  return response.data;\n};\nexport const getEntrepriseStats = async () => {\n  try {\n    const response = await api.get('/entreprise/stats');\n    return response.data.data || response.data;\n  } catch (error) {\n    console.error('Error fetching enterprise stats:', error);\n    throw error;\n  }\n};\nexport const traiterCandidature = async (candidatureId, data) => {\n  try {\n    const response = await api.put(`/entreprise/candidatures/${candidatureId}/traiter`, data);\n\n    // Déclencher automatiquement les événements de mise à jour\n    if (response.data.success) {\n      console.log('Candidature traitée avec succès, déclenchement des événements');\n\n      // Événement pour la notification\n      setTimeout(() => {\n        window.dispatchEvent(new CustomEvent('newNotification', {\n          detail: {\n            type: 'candidature',\n            status: data.status\n          }\n        }));\n      }, 500);\n\n      // Événement pour les stats\n      if (response.data.stats) {\n        window.dispatchEvent(new CustomEvent('statsUpdated', {\n          detail: response.data.stats\n        }));\n      }\n\n      // Événement de candidature traitée\n      window.dispatchEvent(new CustomEvent('candidatureTraitee', {\n        detail: {\n          candidatureId,\n          status: data.status\n        }\n      }));\n    }\n    return response.data;\n  } catch (error) {\n    console.error('Error processing candidature:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["api","getEntrepriseStages","response","get","data","error","console","getEntrepriseCandidatures","getEntrepriseProfile","updateEntrepriseProfile","profileData","put","getEntrepriseStats","traiterCandidature","candidatureId","success","log","setTimeout","window","dispatchEvent","CustomEvent","detail","type","status","stats"],"sources":["C:/Users/hp/Downloads/Project_/internMatch/frontend/src/services/entrepriseService.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const getEntrepriseStages = async () => {\r\n    try {\r\n        const response = await api.get('/entreprise/stages');\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error fetching enterprise stages:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const getEntrepriseCandidatures = async () => {\r\n    try {\r\n        const response = await api.get('/entreprise/candidatures');\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error fetching candidatures:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const getEntrepriseProfile = async () => {\r\n    const response = await api.get('/entreprise/profile');\r\n    return response.data;\r\n};\r\n\r\nexport const updateEntrepriseProfile = async (profileData) => {\r\n    const response = await api.put('/entreprise/profile', profileData);\r\n    return response.data;\r\n};\r\n\r\nexport const getEntrepriseStats = async () => {\r\n    try {\r\n        const response = await api.get('/entreprise/stats');\r\n        return response.data.data || response.data;\r\n    } catch (error) {\r\n        console.error('Error fetching enterprise stats:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const traiterCandidature = async (candidatureId, data) => {\r\n    try {\r\n        const response = await api.put(`/entreprise/candidatures/${candidatureId}/traiter`, data);\r\n        \r\n        // Déclencher automatiquement les événements de mise à jour\r\n        if (response.data.success) {\r\n            console.log('Candidature traitée avec succès, déclenchement des événements');\r\n            \r\n            // Événement pour la notification\r\n            setTimeout(() => {\r\n                window.dispatchEvent(new CustomEvent('newNotification', {\r\n                    detail: { type: 'candidature', status: data.status }\r\n                }));\r\n            }, 500);\r\n            \r\n            // Événement pour les stats\r\n            if (response.data.stats) {\r\n                window.dispatchEvent(new CustomEvent('statsUpdated', { \r\n                    detail: response.data.stats \r\n                }));\r\n            }\r\n            \r\n            // Événement de candidature traitée\r\n            window.dispatchEvent(new CustomEvent('candidatureTraitee', {\r\n                detail: { candidatureId, status: data.status }\r\n            }));\r\n        }\r\n        \r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error processing candidature:', error);\r\n        throw error;\r\n    }\r\n};"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC3C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,oBAAoB,CAAC;IACpD,OAAOD,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAME,yBAAyB,GAAG,MAAAA,CAAA,KAAY;EACjD,IAAI;IACA,MAAML,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,0BAA0B,CAAC;IAC1D,OAAOD,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMG,oBAAoB,GAAG,MAAAA,CAAA,KAAY;EAC5C,MAAMN,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,qBAAqB,CAAC;EACrD,OAAOD,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,OAAO,MAAMK,uBAAuB,GAAG,MAAOC,WAAW,IAAK;EAC1D,MAAMR,QAAQ,GAAG,MAAMF,GAAG,CAACW,GAAG,CAAC,qBAAqB,EAAED,WAAW,CAAC;EAClE,OAAOR,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,OAAO,MAAMQ,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC1C,IAAI;IACA,MAAMV,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,mBAAmB,CAAC;IACnD,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI,IAAIF,QAAQ,CAACE,IAAI;EAC9C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMQ,kBAAkB,GAAG,MAAAA,CAAOC,aAAa,EAAEV,IAAI,KAAK;EAC7D,IAAI;IACA,MAAMF,QAAQ,GAAG,MAAMF,GAAG,CAACW,GAAG,CAAC,4BAA4BG,aAAa,UAAU,EAAEV,IAAI,CAAC;;IAEzF;IACA,IAAIF,QAAQ,CAACE,IAAI,CAACW,OAAO,EAAE;MACvBT,OAAO,CAACU,GAAG,CAAC,+DAA+D,CAAC;;MAE5E;MACAC,UAAU,CAAC,MAAM;QACbC,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAAC,iBAAiB,EAAE;UACpDC,MAAM,EAAE;YAAEC,IAAI,EAAE,aAAa;YAAEC,MAAM,EAAEnB,IAAI,CAACmB;UAAO;QACvD,CAAC,CAAC,CAAC;MACP,CAAC,EAAE,GAAG,CAAC;;MAEP;MACA,IAAIrB,QAAQ,CAACE,IAAI,CAACoB,KAAK,EAAE;QACrBN,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAAC,cAAc,EAAE;UACjDC,MAAM,EAAEnB,QAAQ,CAACE,IAAI,CAACoB;QAC1B,CAAC,CAAC,CAAC;MACP;;MAEA;MACAN,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAAC,oBAAoB,EAAE;QACvDC,MAAM,EAAE;UAAEP,aAAa;UAAES,MAAM,EAAEnB,IAAI,CAACmB;QAAO;MACjD,CAAC,CAAC,CAAC;IACP;IAEA,OAAOrB,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}