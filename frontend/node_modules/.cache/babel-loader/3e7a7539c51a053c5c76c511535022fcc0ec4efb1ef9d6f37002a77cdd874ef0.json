{"ast":null,"code":"import api from './api';\n\n// Service pour gérer les notifications étudiants\nexport const notificationService = {\n  // Marquer une notification comme lue\n  markAsRead: async notificationId => {\n    try {\n      const response = await api.put(`/notifications/${notificationId}/read`);\n      return response.data;\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n      throw error;\n    }\n  },\n  // Récupérer toutes les notifications d'un étudiant\n  getNotifications: async () => {\n    try {\n      const response = await api.get('/notifications');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      throw error;\n    }\n  },\n  // Compter les notifications non lues\n  getUnreadCount: async () => {\n    try {\n      const response = await api.get('/notifications/unread-count');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching unread count:', error);\n      return {\n        count: 0\n      };\n    }\n  },\n  // Marquer toutes les notifications comme lues\n  markAllAsRead: async () => {\n    try {\n      const response = await api.put('/notifications/read-all');\n      return response.data;\n    } catch (error) {\n      console.error('Error marking all as read:', error);\n      throw error;\n    }\n  },\n  // Supprimer une notification\n  deleteNotification: async notificationId => {\n    try {\n      const response = await api.delete(`/notifications/${notificationId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting notification:', error);\n      throw error;\n    }\n  },\n  // Créer une notification locale (pour affichage immédiat)\n  createLocalNotification: (title, message, type = 'info') => {\n    // Créer une notification du navigateur si l'utilisateur a donné la permission\n    if (Notification.permission === 'granted') {\n      new Notification(title, {\n        body: message,\n        icon: '/favicon.ico',\n        badge: '/favicon.ico'\n      });\n    }\n\n    // Émettre un événement pour l'affichage dans l'interface\n    window.dispatchEvent(new CustomEvent('newNotification', {\n      detail: {\n        title,\n        message,\n        type,\n        timestamp: new Date()\n      }\n    }));\n  },\n  // Demander la permission pour les notifications du navigateur\n  requestPermission: async () => {\n    if ('Notification' in window) {\n      const permission = await Notification.requestPermission();\n      return permission === 'granted';\n    }\n    return false;\n  },\n  // Forcer la synchronisation des notifications\n  forceSync: () => {\n    console.log('Force sync notifications');\n    window.dispatchEvent(new CustomEvent('forceNotificationSync'));\n  },\n  // Fonction de test pour vérifier la synchronisation\n  testSync: () => {\n    console.log('Test de synchronisation des notifications');\n    // Créer une notification de test\n    window.dispatchEvent(new CustomEvent('newNotification', {\n      detail: {\n        title: 'Test de synchronisation',\n        message: 'Cette notification teste la synchronisation en temps réel',\n        type: 'info',\n        timestamp: new Date()\n      }\n    }));\n  }\n};\nexport default notificationService;","map":{"version":3,"names":["api","notificationService","markAsRead","notificationId","response","put","data","error","console","getNotifications","get","getUnreadCount","count","markAllAsRead","deleteNotification","delete","createLocalNotification","title","message","type","Notification","permission","body","icon","badge","window","dispatchEvent","CustomEvent","detail","timestamp","Date","requestPermission","forceSync","log","testSync"],"sources":["C:/Users/hp/Downloads/Project_/internship-management-app/frontend/src/services/notificationService.js"],"sourcesContent":["import api from './api';\r\n\r\n// Service pour gérer les notifications étudiants\r\nexport const notificationService = {\r\n    // Marquer une notification comme lue\r\n    markAsRead: async (notificationId) => {\r\n        try {\r\n            const response = await api.put(`/notifications/${notificationId}/read`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error marking notification as read:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Récupérer toutes les notifications d'un étudiant\r\n    getNotifications: async () => {\r\n        try {\r\n            const response = await api.get('/notifications');\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching notifications:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Compter les notifications non lues\r\n    getUnreadCount: async () => {\r\n        try {\r\n            const response = await api.get('/notifications/unread-count');\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching unread count:', error);\r\n            return { count: 0 };\r\n        }\r\n    },\r\n\r\n    // Marquer toutes les notifications comme lues\r\n    markAllAsRead: async () => {\r\n        try {\r\n            const response = await api.put('/notifications/read-all');\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error marking all as read:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Supprimer une notification\r\n    deleteNotification: async (notificationId) => {\r\n        try {\r\n            const response = await api.delete(`/notifications/${notificationId}`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error deleting notification:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Créer une notification locale (pour affichage immédiat)\r\n    createLocalNotification: (title, message, type = 'info') => {\r\n        // Créer une notification du navigateur si l'utilisateur a donné la permission\r\n        if (Notification.permission === 'granted') {\r\n            new Notification(title, {\r\n                body: message,\r\n                icon: '/favicon.ico',\r\n                badge: '/favicon.ico'\r\n            });\r\n        }\r\n\r\n        // Émettre un événement pour l'affichage dans l'interface\r\n        window.dispatchEvent(new CustomEvent('newNotification', {\r\n            detail: { title, message, type, timestamp: new Date() }\r\n        }));\r\n    },    // Demander la permission pour les notifications du navigateur\r\n    requestPermission: async () => {\r\n        if ('Notification' in window) {\r\n            const permission = await Notification.requestPermission();\r\n            return permission === 'granted';\r\n        }\r\n        return false;\r\n    },    // Forcer la synchronisation des notifications\r\n    forceSync: () => {\r\n        console.log('Force sync notifications');\r\n        window.dispatchEvent(new CustomEvent('forceNotificationSync'));\r\n    },\r\n\r\n    // Fonction de test pour vérifier la synchronisation\r\n    testSync: () => {\r\n        console.log('Test de synchronisation des notifications');\r\n        // Créer une notification de test\r\n        window.dispatchEvent(new CustomEvent('newNotification', {\r\n            detail: { \r\n                title: 'Test de synchronisation', \r\n                message: 'Cette notification teste la synchronisation en temps réel',\r\n                type: 'info',\r\n                timestamp: new Date() \r\n            }\r\n        }));\r\n    }\r\n};\r\n\r\nexport default notificationService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}