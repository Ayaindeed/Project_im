{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Downloads\\\\Project_\\\\internship-management-app\\\\frontend\\\\src\\\\components\\\\NotificationBell.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { Badge, Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Button, ListGroup, ListGroupItem } from 'reactstrap';\nimport { FaBell, FaCheck, FaTrash, FaTimes, FaCheckCircle, FaTimesCircle, FaClock, FaInfoCircle, FaDot } from 'react-icons/fa';\nimport { notificationService } from '../services/notificationService';\nimport mascotImage from '../assets/mascot.png';\nimport './NotificationBell.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NotificationBell = () => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [isOpen, setIsOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [showOnlyUnread, setShowOnlyUnread] = useState(false);\n  // Memoized filtered notifications for better performance and proper re-rendering\n  const filteredNotifications = useMemo(() => {\n    return showOnlyUnread ? notifications.filter(n => !n.lue) : notifications;\n  }, [notifications, showOnlyUnread]);\n\n  // Memoized toggle handler\n  const handleToggleChange = useCallback(e => {\n    e.stopPropagation();\n    setShowOnlyUnread(e.target.checked);\n  }, []);\n  useEffect(() => {\n    loadNotifications();\n    loadUnreadCount();\n\n    // Polling plus fréquent pour les nouvelles notifications (toutes les 3 secondes)\n    const interval = setInterval(() => {\n      loadUnreadCount();\n      // Recharger aussi les notifications pour détecter les nouvelles\n      if (!isOpen) {\n        loadNotifications();\n      }\n    }, 3000); // Écouter les événements de nouvelles notifications\n    const handleNewNotification = () => {\n      console.log('Event: nouvelle notification détectée');\n      loadNotifications();\n      loadUnreadCount(true); // Force update pour déclencher l'animation\n    };\n\n    // Écouter les événements de candidature traitée\n    const handleCandidatureUpdate = event => {\n      console.log('Event: candidature traitée', event.detail);\n      // Délai plus court et forcer le rechargement\n      setTimeout(() => {\n        loadNotifications();\n        loadUnreadCount(true); // Force update\n      }, 500);\n    }; // Écouter les événements de mise à jour des stats (qui incluent souvent des nouvelles notifications)\n    const handleStatsUpdate = () => {\n      console.log('Event: stats mises à jour');\n      setTimeout(() => {\n        loadNotifications();\n        loadUnreadCount(true); // Force update\n      }, 500);\n    };\n\n    // Écouter l'événement de synchronisation forcée\n    const handleForceSync = () => {\n      console.log('Event: synchronisation forcée');\n      loadNotifications();\n      loadUnreadCount(true);\n    };\n    window.addEventListener('newNotification', handleNewNotification);\n    window.addEventListener('candidatureTraitee', handleCandidatureUpdate);\n    window.addEventListener('statsUpdated', handleStatsUpdate);\n    window.addEventListener('forceNotificationSync', handleForceSync);\n    return () => {\n      clearInterval(interval);\n      window.removeEventListener('newNotification', handleNewNotification);\n      window.removeEventListener('candidatureTraitee', handleCandidatureUpdate);\n      window.removeEventListener('statsUpdated', handleStatsUpdate);\n      window.removeEventListener('forceNotificationSync', handleForceSync);\n    };\n  }, [isOpen]);\n  const loadNotifications = async () => {\n    try {\n      setLoading(true);\n      const data = await notificationService.getNotifications();\n      setNotifications(data || []);\n    } catch (error) {\n      console.error('Erreur lors du chargement des notifications:', error);\n      // No fake notifications - show empty state\n      setNotifications([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const loadUnreadCount = async (forceUpdate = false) => {\n    try {\n      const data = await notificationService.getUnreadCount();\n      const newCount = data.count || 0;\n      console.log('Count loaded:', newCount, 'Previous:', unreadCount);\n\n      // Si le nombre a augmenté ou si c'est un force update, déclencher l'animation\n      if (newCount > unreadCount || forceUpdate) {\n        // Animation du badge pour attirer l'attention\n        const badge = document.querySelector('.notification-badge');\n        if (badge && newCount > 0) {\n          badge.classList.add('notification-pulse');\n          setTimeout(() => {\n            badge.classList.remove('notification-pulse');\n          }, 1000);\n        }\n      }\n      setUnreadCount(newCount);\n    } catch (error) {\n      console.error('Erreur lors du chargement du compteur:', error);\n      // Ne pas changer le count en cas d'erreur pour éviter les resets intempestifs\n    }\n  };\n  const markAsRead = async notificationId => {\n    try {\n      await notificationService.markAsRead(notificationId);\n      setNotifications(notifications.map(notif => notif.id === notificationId ? {\n        ...notif,\n        lue: true\n      } : notif));\n      setUnreadCount(prev => Math.max(0, prev - 1));\n    } catch (error) {\n      console.error('Erreur lors du marquage comme lu:', error);\n    }\n  };\n  const markAllAsRead = async () => {\n    try {\n      await notificationService.markAllAsRead();\n      setNotifications(notifications.map(notif => ({\n        ...notif,\n        lue: true\n      })));\n      setUnreadCount(0);\n    } catch (error) {\n      console.error('Erreur lors du marquage global:', error);\n    }\n  };\n  const deleteNotification = async notificationId => {\n    console.log('Tentative de suppression de la notification:', notificationId);\n    try {\n      await notificationService.deleteNotification(notificationId);\n      // Mettre à jour la liste des notifications\n      const notificationToDelete = notifications.find(n => n.id === notificationId);\n      setNotifications(notifications.filter(notif => notif.id !== notificationId));\n\n      // Réduire le compteur si la notification n'était pas lue\n      if (notificationToDelete && !notificationToDelete.lue) {\n        setUnreadCount(prev => Math.max(0, prev - 1));\n      }\n      console.log('Notification supprimée avec succès');\n    } catch (error) {\n      console.error('Erreur lors de la suppression:', error);\n      // En cas d'erreur du service, supprimer quand même localement pour la démonstration\n      const notificationToDelete = notifications.find(n => n.id === notificationId);\n      setNotifications(notifications.filter(notif => notif.id !== notificationId));\n      if (notificationToDelete && !notificationToDelete.lu) {\n        setUnreadCount(prev => Math.max(0, prev - 1));\n      }\n    }\n  };\n  const toggle = () => {\n    setIsOpen(!isOpen);\n    if (!isOpen) {\n      loadNotifications();\n    }\n  };\n  const getNotificationIcon = type => {\n    switch (type) {\n      case 'acceptee':\n        return /*#__PURE__*/_jsxDEV(FaCheckCircle, {\n          style: {\n            color: '#28a745'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 16\n        }, this);\n      case 'refusee':\n        return /*#__PURE__*/_jsxDEV(FaTimesCircle, {\n          style: {\n            color: '#dc3545'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 16\n        }, this);\n      case 'en_attente':\n        return /*#__PURE__*/_jsxDEV(FaClock, {\n          style: {\n            color: '#ffc107'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 16\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(FaInfoCircle, {\n          style: {\n            color: '#17a2b8'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  const formatDate = dateString => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffMs = now - date;\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffDays = Math.floor(diffHours / 24);\n    if (diffHours < 1) {\n      return 'À l\\'instant';\n    } else if (diffHours < 24) {\n      return `Il y a ${diffHours}h`;\n    } else if (diffDays < 7) {\n      return `Il y a ${diffDays}j`;\n    } else {\n      return date.toLocaleDateString('fr-FR');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Dropdown, {\n    isOpen: isOpen,\n    toggle: toggle,\n    className: \"notification-dropdown\",\n    children: [/*#__PURE__*/_jsxDEV(DropdownToggle, {\n      tag: \"button\",\n      className: \"notification-bell\",\n      caret: false,\n      children: [/*#__PURE__*/_jsxDEV(FaBell, {\n        size: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), unreadCount > 0 && /*#__PURE__*/_jsxDEV(Badge, {\n        className: \"notification-badge\",\n        children: unreadCount > 99 ? '99+' : unreadCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), \"      \", /*#__PURE__*/_jsxDEV(DropdownMenu, {\n      right: true,\n      className: \"notification-menu\",\n      children: [/*#__PURE__*/_jsxDEV(DropdownItem, {\n        header: true,\n        className: \"notification-header d-flex justify-content-between align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Notifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this), \"            \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toggle-switch\",\n          onClick: e => e.stopPropagation(),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Afficher les non lues\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this), \"              \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: showOnlyUnread,\n            onChange: handleToggleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 63\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 51\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 11\n      }, this), \"        \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-list\",\n        children: loading ? /*#__PURE__*/_jsxDEV(DropdownItem, {\n          disabled: true,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: \"Chargement...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this) : (() => {\n          if (filteredNotifications.length === 0) {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"no-notifications-empty-state\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"empty-state-mascot\",\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: mascotImage,\n                  alt: \"Aucune notification\",\n                  className: \"mascot-image\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 235,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"sparkles\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"sparkle sparkle-1\",\n                    children: \"\\u2728\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 237,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"sparkle sparkle-2\",\n                    children: \"\\u2728\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 238,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"sparkle sparkle-3\",\n                    children: \"\\u2728\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 239,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 236,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 19\n              }, this), \"                  \", /*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"empty-state-title\",\n                children: showOnlyUnread ? \"Aucune notification non lue\" : \"Aucune notification\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 43\n              }, this), \"                  \", /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"empty-state-subtitle\",\n                children: showOnlyUnread ? \"Vous êtes à jour ! Les nouvelles notifications apparaîtront ici.\" : \"Vous n'avez pas encore de notifications. Les nouvelles notifications apparaîtront ici.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 42\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 17\n            }, this);\n          }\n          return filteredNotifications.slice(0, 10).map(notification => /*#__PURE__*/_jsxDEV(DropdownItem, {\n            className: `notification-item ${!notification.lue ? 'unread' : ''} notification-${notification.type}`,\n            onClick: () => !notification.lue && markAsRead(notification.id),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"notification-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"notification-icon\",\n                children: getNotificationIcon(notification.type)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"notification-text\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"notification-title\",\n                  children: notification.titre\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 263,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"notification-message\",\n                  children: notification.message.length > 50 ? notification.message.substring(0, 50) + '...' : notification.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 266,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"notification-time\",\n                  children: formatDate(notification.createdAt)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"notification-actions\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  className: \"btn btn-sm btn-outline-danger notification-delete-btn\",\n                  onClick: e => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    console.log('Suppression de la notification:', notification.id);\n                    deleteNotification(notification.id);\n                  },\n                  title: \"Supprimer la notification\",\n                  children: /*#__PURE__*/_jsxDEV(FaTrash, {\n                    size: 10\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 288,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 277,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 17\n            }, this)\n          }, notification.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 92\n          }, this));\n        })()\n      }, `notifications-${showOnlyUnread}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 34\n      }, this), \"        \", filteredNotifications.length > 10 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(DropdownItem, {\n          divider: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(DropdownItem, {\n          className: \"text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-muted\",\n            children: [filteredNotifications.length - 10, \" autres notifications...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n};\n_s(NotificationBell, \"WwJLpqq4H5rZbxnqMpZnNxURHqc=\");\n_c = NotificationBell;\nexport default NotificationBell;\nvar _c;\n$RefreshReg$(_c, \"NotificationBell\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","Badge","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","Button","ListGroup","ListGroupItem","FaBell","FaCheck","FaTrash","FaTimes","FaCheckCircle","FaTimesCircle","FaClock","FaInfoCircle","FaDot","notificationService","mascotImage","jsxDEV","_jsxDEV","Fragment","_Fragment","NotificationBell","_s","notifications","setNotifications","unreadCount","setUnreadCount","isOpen","setIsOpen","loading","setLoading","showOnlyUnread","setShowOnlyUnread","filteredNotifications","filter","n","lue","handleToggleChange","e","stopPropagation","target","checked","loadNotifications","loadUnreadCount","interval","setInterval","handleNewNotification","console","log","handleCandidatureUpdate","event","detail","setTimeout","handleStatsUpdate","handleForceSync","window","addEventListener","clearInterval","removeEventListener","data","getNotifications","error","forceUpdate","getUnreadCount","newCount","count","badge","document","querySelector","classList","add","remove","markAsRead","notificationId","map","notif","id","prev","Math","max","markAllAsRead","deleteNotification","notificationToDelete","find","lu","toggle","getNotificationIcon","type","style","color","fileName","_jsxFileName","lineNumber","columnNumber","formatDate","dateString","date","Date","now","diffMs","diffHours","floor","diffDays","toLocaleDateString","className","children","tag","caret","size","right","header","onClick","onChange","disabled","length","src","alt","slice","notification","titre","message","substring","createdAt","preventDefault","title","divider","_c","$RefreshReg$"],"sources":["C:/Users/hp/Downloads/Project_/internship-management-app/frontend/src/components/NotificationBell.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from 'react';\r\nimport { \r\n  Badge, \r\n  Dropdown,\r\n  DropdownToggle, \r\n  DropdownMenu, \r\n  DropdownItem,\r\n  Button,\r\n  ListGroup,\r\n  ListGroupItem\r\n} from 'reactstrap';\r\nimport { FaBell, FaCheck, FaTrash, FaTimes, FaCheckCircle, FaTimesCircle, FaClock, FaInfoCircle, FaDot } from 'react-icons/fa';\r\nimport { notificationService } from '../services/notificationService';\r\nimport mascotImage from '../assets/mascot.png';\r\nimport './NotificationBell.css';\r\n\r\nconst NotificationBell = () => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [showOnlyUnread, setShowOnlyUnread] = useState(false);\r\n  // Memoized filtered notifications for better performance and proper re-rendering\r\n  const filteredNotifications = useMemo(() => {\r\n    return showOnlyUnread ? notifications.filter(n => !n.lue) : notifications;\r\n  }, [notifications, showOnlyUnread]);\r\n\r\n  // Memoized toggle handler\r\n  const handleToggleChange = useCallback((e) => {\r\n    e.stopPropagation();\r\n    setShowOnlyUnread(e.target.checked);\r\n  }, []);  useEffect(() => {\r\n    loadNotifications();\r\n    loadUnreadCount();\r\n    \r\n    // Polling plus fréquent pour les nouvelles notifications (toutes les 3 secondes)\r\n    const interval = setInterval(() => {\r\n      loadUnreadCount();\r\n      // Recharger aussi les notifications pour détecter les nouvelles\r\n      if (!isOpen) {\r\n        loadNotifications();\r\n      }\r\n    }, 3000);    // Écouter les événements de nouvelles notifications\r\n    const handleNewNotification = () => {\r\n      console.log('Event: nouvelle notification détectée');\r\n      loadNotifications();\r\n      loadUnreadCount(true); // Force update pour déclencher l'animation\r\n    };\r\n\r\n    // Écouter les événements de candidature traitée\r\n    const handleCandidatureUpdate = (event) => {\r\n      console.log('Event: candidature traitée', event.detail);\r\n      // Délai plus court et forcer le rechargement\r\n      setTimeout(() => {\r\n        loadNotifications();\r\n        loadUnreadCount(true); // Force update\r\n      }, 500);\r\n    };    // Écouter les événements de mise à jour des stats (qui incluent souvent des nouvelles notifications)\r\n    const handleStatsUpdate = () => {\r\n      console.log('Event: stats mises à jour');\r\n      setTimeout(() => {\r\n        loadNotifications();\r\n        loadUnreadCount(true); // Force update\r\n      }, 500);\r\n    };\r\n\r\n    // Écouter l'événement de synchronisation forcée\r\n    const handleForceSync = () => {\r\n      console.log('Event: synchronisation forcée');\r\n      loadNotifications();\r\n      loadUnreadCount(true);\r\n    };\r\n\r\n    window.addEventListener('newNotification', handleNewNotification);\r\n    window.addEventListener('candidatureTraitee', handleCandidatureUpdate);\r\n    window.addEventListener('statsUpdated', handleStatsUpdate);\r\n    window.addEventListener('forceNotificationSync', handleForceSync);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n      window.removeEventListener('newNotification', handleNewNotification);\r\n      window.removeEventListener('candidatureTraitee', handleCandidatureUpdate);\r\n      window.removeEventListener('statsUpdated', handleStatsUpdate);\r\n      window.removeEventListener('forceNotificationSync', handleForceSync);\r\n    };\r\n  }, [isOpen]);const loadNotifications = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const data = await notificationService.getNotifications();\r\n      setNotifications(data || []);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des notifications:', error);\r\n      // No fake notifications - show empty state\r\n      setNotifications([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };  const loadUnreadCount = async (forceUpdate = false) => {\r\n    try {\r\n      const data = await notificationService.getUnreadCount();\r\n      const newCount = data.count || 0;\r\n      \r\n      console.log('Count loaded:', newCount, 'Previous:', unreadCount);\r\n      \r\n      // Si le nombre a augmenté ou si c'est un force update, déclencher l'animation\r\n      if (newCount > unreadCount || forceUpdate) {\r\n        // Animation du badge pour attirer l'attention\r\n        const badge = document.querySelector('.notification-badge');\r\n        if (badge && newCount > 0) {\r\n          badge.classList.add('notification-pulse');\r\n          setTimeout(() => {\r\n            badge.classList.remove('notification-pulse');\r\n          }, 1000);\r\n        }\r\n      }\r\n      \r\n      setUnreadCount(newCount);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement du compteur:', error);\r\n      // Ne pas changer le count en cas d'erreur pour éviter les resets intempestifs\r\n    }\r\n  };\r\n\r\n  const markAsRead = async (notificationId) => {\r\n    try {\r\n      await notificationService.markAsRead(notificationId);      setNotifications(notifications.map(notif => \r\n        notif.id === notificationId ? { ...notif, lue: true } : notif\r\n      ));\r\n      setUnreadCount(prev => Math.max(0, prev - 1));\r\n    } catch (error) {\r\n      console.error('Erreur lors du marquage comme lu:', error);\r\n    }\r\n  };\r\n\r\n  const markAllAsRead = async () => {\r\n    try {\r\n      await notificationService.markAllAsRead();\r\n      setNotifications(notifications.map(notif => ({ ...notif, lue: true })));\r\n      setUnreadCount(0);\r\n    } catch (error) {\r\n      console.error('Erreur lors du marquage global:', error);\r\n    }\r\n  };\r\n  const deleteNotification = async (notificationId) => {\r\n    console.log('Tentative de suppression de la notification:', notificationId);\r\n    try {\r\n      await notificationService.deleteNotification(notificationId);\r\n        // Mettre à jour la liste des notifications\r\n      const notificationToDelete = notifications.find(n => n.id === notificationId);\r\n      setNotifications(notifications.filter(notif => notif.id !== notificationId));\r\n      \r\n      // Réduire le compteur si la notification n'était pas lue\r\n      if (notificationToDelete && !notificationToDelete.lue) {\r\n        setUnreadCount(prev => Math.max(0, prev - 1));\r\n      }\r\n      \r\n      console.log('Notification supprimée avec succès');\r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression:', error);\r\n      // En cas d'erreur du service, supprimer quand même localement pour la démonstration\r\n      const notificationToDelete = notifications.find(n => n.id === notificationId);\r\n      setNotifications(notifications.filter(notif => notif.id !== notificationId));\r\n      if (notificationToDelete && !notificationToDelete.lu) {\r\n        setUnreadCount(prev => Math.max(0, prev - 1));\r\n      }\r\n    }\r\n  };\r\n\r\n  const toggle = () => {\r\n    setIsOpen(!isOpen);\r\n    if (!isOpen) {\r\n      loadNotifications();\r\n    }\r\n  };\r\n  const getNotificationIcon = (type) => {\r\n    switch (type) {\r\n      case 'acceptee':\r\n        return <FaCheckCircle style={{ color: '#28a745' }} />;\r\n      case 'refusee':\r\n        return <FaTimesCircle style={{ color: '#dc3545' }} />;\r\n      case 'en_attente':\r\n        return <FaClock style={{ color: '#ffc107' }} />;\r\n      default:\r\n        return <FaInfoCircle style={{ color: '#17a2b8' }} />;\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    const now = new Date();\r\n    const diffMs = now - date;\r\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\r\n    const diffDays = Math.floor(diffHours / 24);\r\n\r\n    if (diffHours < 1) {\r\n      return 'À l\\'instant';\r\n    } else if (diffHours < 24) {\r\n      return `Il y a ${diffHours}h`;\r\n    } else if (diffDays < 7) {\r\n      return `Il y a ${diffDays}j`;\r\n    } else {\r\n      return date.toLocaleDateString('fr-FR');\r\n    }\r\n  };  return (\r\n    <Dropdown isOpen={isOpen} toggle={toggle} className=\"notification-dropdown\">\r\n      <DropdownToggle \r\n        tag=\"button\" \r\n        className=\"notification-bell\"\r\n        caret={false}\r\n      >\r\n        <FaBell size={16} />\r\n        {unreadCount > 0 && (\r\n          <Badge className=\"notification-badge\">\r\n            {unreadCount > 99 ? '99+' : unreadCount}\r\n          </Badge>\r\n        )}\r\n      </DropdownToggle>      <DropdownMenu right className=\"notification-menu\">\r\n          <DropdownItem header className=\"notification-header d-flex justify-content-between align-items-center\">\r\n            <span>Notifications</span>            <div className=\"toggle-switch\" onClick={(e) => e.stopPropagation()}>\r\n              <span>Afficher les non lues</span>              <input \r\n                type=\"checkbox\" \r\n                checked={showOnlyUnread}\r\n                onChange={handleToggleChange}\r\n              />\r\n            </div>\r\n          </DropdownItem>        <div className=\"notification-list\" key={`notifications-${showOnlyUnread}`}>\r\n          {loading ? (\r\n            <DropdownItem disabled>\r\n              <div className=\"text-center\">Chargement...</div>\r\n            </DropdownItem>          ) : (() => {\r\n            if (filteredNotifications.length === 0) {\r\n              return (\r\n                <div className=\"no-notifications-empty-state\">\r\n                  <div className=\"empty-state-mascot\">\r\n                    <img src={mascotImage} alt=\"Aucune notification\" className=\"mascot-image\" />\r\n                    <div className=\"sparkles\">\r\n                      <div className=\"sparkle sparkle-1\">✨</div>\r\n                      <div className=\"sparkle sparkle-2\">✨</div>\r\n                      <div className=\"sparkle sparkle-3\">✨</div>\r\n                    </div>\r\n                  </div>                  <h4 className=\"empty-state-title\">\r\n                    {showOnlyUnread ? \"Aucune notification non lue\" : \"Aucune notification\"}\r\n                  </h4>                  <p className=\"empty-state-subtitle\">\r\n                    {showOnlyUnread \r\n                      ? \"Vous êtes à jour ! Les nouvelles notifications apparaîtront ici.\"\r\n                      : \"Vous n'avez pas encore de notifications. Les nouvelles notifications apparaîtront ici.\"\r\n                    }\r\n                  </p>\r\n                </div>\r\n              );\r\n            }\r\n            \r\n            return filteredNotifications.slice(0, 10).map((notification) => (              <DropdownItem \r\n                key={notification.id} \r\n                className={`notification-item ${!notification.lue ? 'unread' : ''} notification-${notification.type}`}\r\n                onClick={() => !notification.lue && markAsRead(notification.id)}\r\n              >\r\n                <div className=\"notification-content\">\r\n                  <div className=\"notification-icon\">\r\n                    {getNotificationIcon(notification.type)}\r\n                  </div>\r\n                  <div className=\"notification-text\">\r\n                    <div className=\"notification-title\">\r\n                      {notification.titre}\r\n                    </div>\r\n                    <div className=\"notification-message\">\r\n                      {notification.message.length > 50 ? \r\n                        notification.message.substring(0, 50) + '...' : \r\n                        notification.message\r\n                      }\r\n                    </div>\r\n                    <div className=\"notification-time\">\r\n                      {formatDate(notification.createdAt)}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"notification-actions\">\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-sm btn-outline-danger notification-delete-btn\"\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        e.stopPropagation();\r\n                        console.log('Suppression de la notification:', notification.id);\r\n                        deleteNotification(notification.id);\r\n                      }}\r\n                      title=\"Supprimer la notification\"\r\n                    >\r\n                      <FaTrash size={10} />\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </DropdownItem>\r\n            ));\r\n          })()}\r\n        </div>        {filteredNotifications.length > 10 && (\r\n          <>\r\n            <DropdownItem divider />\r\n            <DropdownItem className=\"text-center\">\r\n              <small className=\"text-muted\">\r\n                {filteredNotifications.length - 10} autres notifications...\r\n              </small>\r\n            </DropdownItem>\r\n          </>\r\n        )}\r\n      </DropdownMenu>\r\n    </Dropdown>\r\n  );\r\n};\r\n\r\nexport default NotificationBell;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}