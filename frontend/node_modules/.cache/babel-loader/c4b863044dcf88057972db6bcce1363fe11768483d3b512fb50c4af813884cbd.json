{"ast":null,"code":"import api from './api';\nexport const login = async credentials => {\n  const response = await api.post('/auth/login', credentials);\n  return response.data;\n};\nexport const registerUser = async userData => {\n  const response = await api.post('/auth/register', userData);\n  return response.data;\n};\nexport const registerAdmin = async adminData => {\n  try {\n    // Ensure we're sending only the required fields according to schema\n    const userData = {\n      nom: adminData.nom,\n      prenom: adminData.prenom,\n      email: adminData.email,\n      motdepasse: adminData.motdepasse\n      // role, actif, and dateInscription are handled by backend\n    };\n\n    // Use the correct endpoint from our routes\n    const response = await api.post('/auth/admin/register', userData);\n    if (!response.data) {\n      throw new Error('No data received from server');\n    }\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response2, _error$response2$data, _error$config;\n    console.error('Admin registration error:', {\n      status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n      message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed',\n      endpoint: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url\n    });\n    throw error;\n  }\n};","map":{"version":3,"names":["api","login","credentials","response","post","data","registerUser","userData","registerAdmin","adminData","nom","prenom","email","motdepasse","Error","error","_error$response","_error$response2","_error$response2$data","_error$config","console","status","message","endpoint","config","url"],"sources":["C:/Users/hp/Downloads/Project_/internship-management-app/frontend/src/services/authService.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const login = async (credentials) => {\r\n    const response = await api.post('/auth/login', credentials);\r\n    return response.data;\r\n};\r\n\r\nexport const registerUser = async (userData) => {\r\n    const response = await api.post('/auth/register', userData);\r\n    return response.data;\r\n};\r\n\r\nexport const registerAdmin = async (adminData) => {\r\n    try {\r\n        // Ensure we're sending only the required fields according to schema\r\n        const userData = {\r\n            nom: adminData.nom,\r\n            prenom: adminData.prenom,\r\n            email: adminData.email,\r\n            motdepasse: adminData.motdepasse\r\n            // role, actif, and dateInscription are handled by backend\r\n        };\r\n\r\n        // Use the correct endpoint from our routes\r\n        const response = await api.post('/auth/admin/register', userData);\r\n\r\n        if (!response.data) {\r\n            throw new Error('No data received from server');\r\n        }\r\n\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Admin registration error:', {\r\n            status: error.response?.status,\r\n            message: error.response?.data?.message || 'Registration failed',\r\n            endpoint: error.config?.url\r\n        });\r\n        throw error;\r\n    }\r\n};"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,OAAO,MAAMC,KAAK,GAAG,MAAOC,WAAW,IAAK;EACxC,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,aAAa,EAAEF,WAAW,CAAC;EAC3D,OAAOC,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC5C,MAAMJ,QAAQ,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,gBAAgB,EAAEG,QAAQ,CAAC;EAC3D,OAAOJ,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,OAAO,MAAMG,aAAa,GAAG,MAAOC,SAAS,IAAK;EAC9C,IAAI;IACA;IACA,MAAMF,QAAQ,GAAG;MACbG,GAAG,EAAED,SAAS,CAACC,GAAG;MAClBC,MAAM,EAAEF,SAAS,CAACE,MAAM;MACxBC,KAAK,EAAEH,SAAS,CAACG,KAAK;MACtBC,UAAU,EAAEJ,SAAS,CAACI;MACtB;IACJ,CAAC;;IAED;IACA,MAAMV,QAAQ,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,sBAAsB,EAAEG,QAAQ,CAAC;IAEjE,IAAI,CAACJ,QAAQ,CAACE,IAAI,EAAE;MAChB,MAAM,IAAIS,KAAK,CAAC,8BAA8B,CAAC;IACnD;IAEA,OAAOX,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOU,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,gBAAA,EAAAC,qBAAA,EAAAC,aAAA;IACZC,OAAO,CAACL,KAAK,CAAC,2BAA2B,EAAE;MACvCM,MAAM,GAAAL,eAAA,GAAED,KAAK,CAACZ,QAAQ,cAAAa,eAAA,uBAAdA,eAAA,CAAgBK,MAAM;MAC9BC,OAAO,EAAE,EAAAL,gBAAA,GAAAF,KAAK,CAACZ,QAAQ,cAAAc,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBZ,IAAI,cAAAa,qBAAA,uBAApBA,qBAAA,CAAsBI,OAAO,KAAI,qBAAqB;MAC/DC,QAAQ,GAAAJ,aAAA,GAAEJ,KAAK,CAACS,MAAM,cAAAL,aAAA,uBAAZA,aAAA,CAAcM;IAC5B,CAAC,CAAC;IACF,MAAMV,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}