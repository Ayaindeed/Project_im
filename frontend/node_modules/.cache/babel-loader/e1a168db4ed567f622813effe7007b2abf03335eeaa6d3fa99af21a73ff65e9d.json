{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080/api';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor for auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 404) {\n    console.error('API endpoint not found:', error.config.url);\n  }\n  return Promise.reject(error);\n});\n\n// Auth\nexport const registerUser = data => api.post('/auth/register', data);\nexport const loginUser = async credentials => {\n  try {\n    const response = await api.post('/auth/login', credentials);\n\n    // Validate response structure\n    const {\n      data\n    } = response;\n    if (!data || !data.accessToken || !data.role) {\n      throw new Error('Invalid response format from server');\n    }\n    return response;\n  } catch (error) {\n    var _error$response2, _error$response3, _error$response3$data;\n    console.error('Login API Error:', {\n      status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status,\n      message: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || error.message\n    });\n    throw error;\n  }\n};\n// Admin endpoints\nexport const registerAdmin = async adminData => {\n  try {\n    const response = await api.post('/auth/admin/register', {\n      nom: adminData.nom,\n      prenom: adminData.prenom,\n      email: adminData.email,\n      motdepasse: adminData.motdepasse,\n      role: 'admin',\n      dateInscription: new Date().toISOString(),\n      actif: true\n    });\n    const {\n      data\n    } = response;\n    if (!data) {\n      throw new Error(\"Aucune donnée reçue du serveur\");\n    }\n    return {\n      success: true,\n      data: data,\n      message: \"Inscription administrateur réussie\"\n    };\n  } catch (error) {\n    var _error$response4, _error$response5, _error$response5$data;\n    console.error(\"Admin registration error:\", {\n      status: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status,\n      message: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || \"Erreur lors de l'inscription administrateur\"\n    });\n    throw error;\n  }\n};\n\n// Admin management endpoints\nexport const getUsers = async () => {\n  const response = await api.get('/admin/users');\n  return response.data;\n};\nexport const getUserById = async userId => {\n  const response = await api.get(`/admin/users/${userId}`);\n  return response.data;\n};\nexport const updateUserStatus = async (userId, actif) => {\n  const response = await api.put(`/admin/users/${userId}/status`, {\n    actif\n  });\n  return response.data;\n};\nexport const getSystemStats = async () => {\n  const response = await api.get('/admin/stats');\n  return response.data;\n};\nexport const assignTuteur = async data => {\n  const response = await api.post('/admin/tuteurs/assign', {\n    userId: data.userId,\n    entrepriseId: data.entrepriseId,\n    fonction: data.fonction\n  });\n  return response.data;\n};\nexport const getStudentDetails = async studentId => {\n  const response = await api.get(`/admin/etudiants/${studentId}`);\n  return response.data;\n};\nexport const getCompanyDetails = async entrepriseId => {\n  const response = await api.get(`/admin/entreprises/${entrepriseId}`);\n  return response.data;\n};\nexport const getInternshipStats = async () => {\n  const response = await api.get('/admin/stages/stats');\n  return response.data;\n};\nexport const getApplicationStats = async () => {\n  const response = await api.get('/admin/candidatures/stats');\n  return response.data;\n};\n\n// Admin\nexport const getAllUsers = () => api.get('/admin/users');\nexport const toggleUserActivation = id => api.put(`/admin/users/${id}/toggle`);\nexport const getStageStats = () => api.get('/admin/stats');\nexport const getUserDetails = id => api.get(`/admin/users/${id}`);\nexport const affecterEntreprise = data => api.post('/admin/assign-entreprise', data);\n\n// Stages (public/shared)\n// Make sure these endpoints match your backend\nexport const getAllStages = async () => {\n  try {\n    const response = await api.get('/stages');\n    // Validate response format\n    if (!response.data || !Array.isArray(response.data)) {\n      throw new Error('Invalid API response format');\n    }\n    return response.data;\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n};\nexport const getStageById = id => api.get(`/stages/${id}`);\n\n// Candidatures (admin/entreprise)\nexport const getAllCandidatures = () => api.get('/candidatures');\nexport const updateCandidature = (id, data) => api.put(`/candidatures/${id}`, data);\n\n// Tuteurs\nexport const getTuteurs = () => api.get('/tuteurs');\nexport const createTuteur = data => api.post('/tuteurs', data);\nexport const updateTuteur = (id, data) => api.put(`/tuteurs/${id}`, data);\nexport const deleteTuteur = id => api.delete(`/tuteurs/${id}`);","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","console","url","registerUser","data","post","loginUser","credentials","accessToken","role","Error","_error$response2","_error$response3","_error$response3$data","message","registerAdmin","adminData","nom","prenom","email","motdepasse","dateInscription","Date","toISOString","actif","success","_error$response4","_error$response5","_error$response5$data","getUsers","get","getUserById","userId","updateUserStatus","put","getSystemStats","assignTuteur","entrepriseId","fonction","getStudentDetails","studentId","getCompanyDetails","getInternshipStats","getApplicationStats","getAllUsers","toggleUserActivation","id","getStageStats","getUserDetails","affecterEntreprise","getAllStages","Array","isArray","getStageById","getAllCandidatures","updateCandidature","getTuteurs","createTuteur","updateTuteur","deleteTuteur","delete"],"sources":["C:/Users/hp/Downloads/Project_/internship-management-app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:8080/api';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor for auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add response interceptor for error handling\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 404) {\n      console.error('API endpoint not found:', error.config.url);\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth\nexport const registerUser = (data) => api.post('/auth/register', data);\nexport const loginUser = async (credentials) => {\n  try {\n    const response = await api.post('/auth/login', credentials);\n    \n    // Validate response structure\n    const { data } = response;\n    if (!data || !data.accessToken || !data.role) {\n      throw new Error('Invalid response format from server');\n    }\n\n    return response;\n  } catch (error) {\n    console.error('Login API Error:', {\n      status: error.response?.status,\n      message: error.response?.data?.message || error.message\n    });\n    throw error;\n  }\n};\n// Admin endpoints\nexport const registerAdmin = async (adminData) => {\n    try {\n        const response = await api.post('/auth/admin/register', {\n            nom: adminData.nom,\n            prenom: adminData.prenom,\n            email: adminData.email,\n            motdepasse: adminData.motdepasse,\n            role: 'admin',\n            dateInscription: new Date().toISOString(),\n            actif: true\n        });\n\n        const { data } = response;\n        if (!data) {\n            throw new Error(\"Aucune donnée reçue du serveur\");\n        }\n\n        return {\n            success: true,\n            data: data,\n            message: \"Inscription administrateur réussie\"\n        };\n    } catch (error) {\n        console.error(\"Admin registration error:\", {\n            status: error.response?.status,\n            message: error.response?.data?.message || \"Erreur lors de l'inscription administrateur\"\n        });\n        throw error;\n    }\n};\n\n// Admin management endpoints\nexport const getUsers = async () => {\n    const response = await api.get('/admin/users');\n    return response.data;\n};\n\nexport const getUserById = async (userId) => {\n    const response = await api.get(`/admin/users/${userId}`);\n    return response.data;\n};\n\nexport const updateUserStatus = async (userId, actif) => {\n    const response = await api.put(`/admin/users/${userId}/status`, { actif });\n    return response.data;\n};\n\nexport const getSystemStats = async () => {\n    const response = await api.get('/admin/stats');\n    return response.data;\n};\n\nexport const assignTuteur = async (data) => {\n    const response = await api.post('/admin/tuteurs/assign', {\n        userId: data.userId,\n        entrepriseId: data.entrepriseId,\n        fonction: data.fonction\n    });\n    return response.data;\n};\n\nexport const getStudentDetails = async (studentId) => {\n    const response = await api.get(`/admin/etudiants/${studentId}`);\n    return response.data;\n};\n\nexport const getCompanyDetails = async (entrepriseId) => {\n    const response = await api.get(`/admin/entreprises/${entrepriseId}`);\n    return response.data;\n};\n\nexport const getInternshipStats = async () => {\n    const response = await api.get('/admin/stages/stats');\n    return response.data;\n};\n\nexport const getApplicationStats = async () => {\n    const response = await api.get('/admin/candidatures/stats');\n    return response.data;\n};\n\n// Admin\nexport const getAllUsers = () => api.get('/admin/users');\nexport const toggleUserActivation = (id) => api.put(`/admin/users/${id}/toggle`);\nexport const getStageStats = () => api.get('/admin/stats');\nexport const getUserDetails = (id) => api.get(`/admin/users/${id}`);\nexport const affecterEntreprise = (data) => api.post('/admin/assign-entreprise', data);\n\n// Stages (public/shared)\n// Make sure these endpoints match your backend\nexport const getAllStages = async () => {\n  try {\n    const response = await api.get('/stages');\n    // Validate response format\n    if (!response.data || !Array.isArray(response.data)) {\n      throw new Error('Invalid API response format');\n    }\n    return response.data;\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n};\n\nexport const getStageById = (id) => api.get(`/stages/${id}`);\n\n// Candidatures (admin/entreprise)\nexport const getAllCandidatures = () => api.get('/candidatures');\nexport const updateCandidature = (id, data) => api.put(`/candidatures/${id}`, data);\n\n// Tuteurs\nexport const getTuteurs = () => api.get('/tuteurs');\nexport const createTuteur = (data) => api.post('/tuteurs', data);\nexport const updateTuteur = (id, data) => api.put(`/tuteurs/${id}`, data);\nexport const deleteTuteur = (id) => api.delete(`/tuteurs/${id}`);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}