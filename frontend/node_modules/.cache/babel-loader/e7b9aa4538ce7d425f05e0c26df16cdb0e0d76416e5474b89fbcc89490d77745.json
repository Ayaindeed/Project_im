{"ast":null,"code":"import api from'./api';// Service pour gérer les notifications étudiants\nexport const notificationService={// Marquer une notification comme lue\nmarkAsRead:async notificationId=>{try{const response=await api.put(\"/notifications/\".concat(notificationId,\"/read\"));return response.data;}catch(error){console.error('Error marking notification as read:',error);throw error;}},// Récupérer toutes les notifications d'un étudiant\ngetNotifications:async()=>{try{const response=await api.get('/notifications');return response.data;}catch(error){console.error('Error fetching notifications:',error);throw error;}},// Compter les notifications non lues\ngetUnreadCount:async()=>{try{const response=await api.get('/notifications/unread-count');return response.data;}catch(error){console.error('Error fetching unread count:',error);return{count:0};}},// Marquer toutes les notifications comme lues\nmarkAllAsRead:async()=>{try{const response=await api.put('/notifications/read-all');return response.data;}catch(error){console.error('Error marking all as read:',error);throw error;}},// Supprimer une notification\ndeleteNotification:async notificationId=>{try{const response=await api.delete(\"/notifications/\".concat(notificationId));return response.data;}catch(error){console.error('Error deleting notification:',error);throw error;}},// Créer une notification locale (pour affichage immédiat)\ncreateLocalNotification:function(title,message){let type=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'info';// Créer une notification du navigateur si l'utilisateur a donné la permission\nif(Notification.permission==='granted'){new Notification(title,{body:message,icon:'/favicon.ico',badge:'/favicon.ico'});}// Émettre un événement pour l'affichage dans l'interface\nwindow.dispatchEvent(new CustomEvent('newNotification',{detail:{title,message,type,timestamp:new Date()}}));},// Demander la permission pour les notifications du navigateur\nrequestPermission:async()=>{if('Notification'in window){const permission=await Notification.requestPermission();return permission==='granted';}return false;}};export default notificationService;","map":{"version":3,"names":["api","notificationService","markAsRead","notificationId","response","put","concat","data","error","console","getNotifications","get","getUnreadCount","count","markAllAsRead","deleteNotification","delete","createLocalNotification","title","message","type","arguments","length","undefined","Notification","permission","body","icon","badge","window","dispatchEvent","CustomEvent","detail","timestamp","Date","requestPermission"],"sources":["C:/Users/hp/Downloads/Project_/internship-management-app/frontend/src/services/notificationService.js"],"sourcesContent":["import api from './api';\r\n\r\n// Service pour gérer les notifications étudiants\r\nexport const notificationService = {\r\n    // Marquer une notification comme lue\r\n    markAsRead: async (notificationId) => {\r\n        try {\r\n            const response = await api.put(`/notifications/${notificationId}/read`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error marking notification as read:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Récupérer toutes les notifications d'un étudiant\r\n    getNotifications: async () => {\r\n        try {\r\n            const response = await api.get('/notifications');\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching notifications:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Compter les notifications non lues\r\n    getUnreadCount: async () => {\r\n        try {\r\n            const response = await api.get('/notifications/unread-count');\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching unread count:', error);\r\n            return { count: 0 };\r\n        }\r\n    },\r\n\r\n    // Marquer toutes les notifications comme lues\r\n    markAllAsRead: async () => {\r\n        try {\r\n            const response = await api.put('/notifications/read-all');\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error marking all as read:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Supprimer une notification\r\n    deleteNotification: async (notificationId) => {\r\n        try {\r\n            const response = await api.delete(`/notifications/${notificationId}`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error deleting notification:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Créer une notification locale (pour affichage immédiat)\r\n    createLocalNotification: (title, message, type = 'info') => {\r\n        // Créer une notification du navigateur si l'utilisateur a donné la permission\r\n        if (Notification.permission === 'granted') {\r\n            new Notification(title, {\r\n                body: message,\r\n                icon: '/favicon.ico',\r\n                badge: '/favicon.ico'\r\n            });\r\n        }\r\n\r\n        // Émettre un événement pour l'affichage dans l'interface\r\n        window.dispatchEvent(new CustomEvent('newNotification', {\r\n            detail: { title, message, type, timestamp: new Date() }\r\n        }));\r\n    },\r\n\r\n    // Demander la permission pour les notifications du navigateur\r\n    requestPermission: async () => {\r\n        if ('Notification' in window) {\r\n            const permission = await Notification.requestPermission();\r\n            return permission === 'granted';\r\n        }\r\n        return false;    }\r\n};\r\n\r\nexport default notificationService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}