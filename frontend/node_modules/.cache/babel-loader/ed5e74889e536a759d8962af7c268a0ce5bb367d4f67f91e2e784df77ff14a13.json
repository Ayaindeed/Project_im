{"ast":null,"code":"import axios from'axios';// Create base axios instance\nconst api=axios.create({baseURL:process.env.REACT_APP_API_URL||'http://localhost:8080/api',headers:{'Content-Type':'application/json'},withCredentials:true});// Add request interceptor for auth token\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>{return Promise.reject(error);});export default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject"],"sources":["C:/Users/hp/Downloads/Project_/internship-management-app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create base axios instance\nconst api = axios.create({\n    baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    withCredentials: true\n});\n\n// Add request interceptor for auth token\napi.interceptors.request.use(\n    (config) => {\n        const token = localStorage.getItem('token');\n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n    },\n    (error) => {\n        return Promise.reject(error);\n    }\n);\n\nexport default api;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA,KAAM,CAAAC,GAAG,CAAGD,KAAK,CAACE,MAAM,CAAC,CACrBC,OAAO,CAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,2BAA2B,CACrEC,OAAO,CAAE,CACL,cAAc,CAAE,kBACpB,CAAC,CACDC,eAAe,CAAE,IACrB,CAAC,CAAC,CAEF;AACAP,GAAG,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CACvBC,MAAM,EAAK,CACR,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAC3C,GAAIF,KAAK,CAAE,CACPD,MAAM,CAACL,OAAO,CAACS,aAAa,WAAAC,MAAA,CAAaJ,KAAK,CAAE,CACpD,CACA,MAAO,CAAAD,MAAM,CACjB,CAAC,CACAM,KAAK,EAAK,CACP,MAAO,CAAAC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAChC,CACJ,CAAC,CAED,cAAe,CAAAjB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}